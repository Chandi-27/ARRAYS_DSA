Reverse Nodes in k-Group :

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

SOLUTION :

class Solution {
    public static int size1(ListNode head)
    {
        int size=0;
        while(head!=null)
        {
            head=head.next;
            size++;
        }
        return size;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        
     ListNode curr=head;
     ListNode prev=null;
     ListNode nxt=curr;
     int count=0;
     int size=0;
     if(size1(head)<k && nxt!=null)
     {      
           return nxt;
        }
        else
        {
       while(curr!=null && count<k )
       {
           nxt=curr.next;
           curr.next=prev;
           prev=curr;
           curr=nxt;
           count++;
       }
       if(nxt!=null)
       head.next=reverseKGroup(nxt,k);
        }
       return prev;   
    }
}
